
.. _program_listing_file__home_chunwei_project_cinn2_cinn_utils_string.h:

Program Listing for File string.h
=================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_chunwei_project_cinn2_cinn_utils_string.h>` (``/home/chunwei/project/cinn2/cinn/utils/string.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   #include <memory>
   #include <sstream>
   #include <string>
   #include <vector>
   
   namespace cinn {
   namespace utils {
   
   template <typename T>
   std::string GetStreamCnt(const T& x);
   
   std::string StringFormat(const std::string& fmt_str, ...);
   
   template <typename T = std::string>
   std::string Join(const std::vector<T>& fields, const std::string& splitter) {
     if (fields.empty()) return "";
     std::stringstream ss;
     for (int i = 0; i < fields.size() - 1; i++) ss << fields[i] << splitter;
     ss << fields.back();
     return ss.str();
   }
   
   std::vector<std::string> Split(const std::string& str, const std::string& splitter);
   
   std::string Trim(const std::string& s, const char* empty = " \n\r\t");
   
   std::string Uppercase(const std::string& x);
   
   void Replace(std::string* s, const std::string& from, const std::string& to);
   
   bool Startswith(const std::string& x, const std::string& str);
   
   bool Endswith(const std::string& x, const std::string& str);
   
   template <typename T>
   std::string GetStreamCnt(const T& x) {
     std::stringstream os;
     os << x;
     return os.str();
   }
   
   std::string TransValidVarName(std::string name);
   
   }  // namespace utils
   }  // namespace cinn
