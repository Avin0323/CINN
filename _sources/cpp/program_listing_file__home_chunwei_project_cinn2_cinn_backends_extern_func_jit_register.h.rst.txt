
.. _program_listing_file__home_chunwei_project_cinn2_cinn_backends_extern_func_jit_register.h:

Program Listing for File extern_func_jit_register.h
===================================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_chunwei_project_cinn2_cinn_backends_extern_func_jit_register.h>` (``/home/chunwei/project/cinn2/cinn/backends/extern_func_jit_register.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #pragma once
   
   #include <memory>
   #include <string>
   #include <utility>
   #include <vector>
   
   #include "cinn/backends/extern_func_emitter.h"
   #include "cinn/backends/extern_func_emitter_builtin.h"
   #include "cinn/backends/extern_func_protos.h"
   #include "cinn/backends/function_prototype.h"
   #include "cinn/backends/llvm/codegen_llvm.h"
   #include "cinn/backends/llvm/ir_builder_mixin.h"
   #include "cinn/backends/llvm/llvm_util.h"
   #include "cinn/backends/llvm/runtime_symbol_registry.h"
   #include "cinn/common/macros.h"
   
   #define REGISTER_EXTERN_FUNC_HELPER(fn__, target__) \
     ::cinn::backends::RegisterExternFunction(#fn__, target__, reinterpret_cast<void*>(fn__))
   
   #define REGISTER_FACKED_EXTERN_FUNC_HELPER(fn__, target__) ::cinn::backends::RegisterExternFunction(#fn__, target__)
   
   #define REGISTER_EXTERN_FUNC_1_IN_1_OUT(fn__, target__, in_type__, out_type__) \
     REGISTER_EXTERN_FUNC_HELPER(fn__, target__).SetRetType<out_type__>().AddInputType<in_type__>().End()
   
   #define REGISTER_EXTERN_FUNC_2_IN_1_OUT(fn__, target__, in_type1__, in_type2__, out_type__) \
     REGISTER_EXTERN_FUNC_HELPER(fn__, target__)                                               \
         .SetRetType<out_type__>()                                                             \
         .AddInputType<in_type1__>()                                                           \
         .AddInputType<in_type2__>()                                                           \
         .End()
   
   #define REGISTER_EXTERN_SOURCE_FUNC_1_IN_1_OUT(fn__, target__, in_type__, out_type__) \
     REGISTER_FACKED_EXTERN_FUNC_HELPER(fn__, target__).SetRetType<out_type__>().AddInputType<in_type__>().End()
   
   #define REGISTER_EXTERN_SOURCE_FUNC_2_IN_1_OUT(fn__, target__, in_type1__, in_type2__, out_type__) \
     REGISTER_EXTERN_FUNC_HELPER(fn__, target__)                                                      \
         .SetRetType<out_type__>()                                                                    \
         .AddInputType<in_type1__>()                                                                  \
         .AddInputType<in_type2__>()                                                                  \
         .End()
   
   namespace cinn {
   namespace backends {
   
   static const char* TargetToBackendRepr(Target target) {
     switch (target.arch) {
       case Target::Arch::X86:
         return backend_llvm_host;
       case Target::Arch::NVGPU:
         return backend_nvgpu;
       default:
         CINN_NOT_IMPLEMENTED
     }
     return nullptr;
   }
   
   struct RegisterExternFunction {
     RegisterExternFunction(const std::string& fn_name, Target target, void* fn_ptr = nullptr)
         : fn_name_(fn_name), target_(target), fn_ptr_(fn_ptr), fn_proto_builder_(fn_name) {}
   
     template <typename T>
     RegisterExternFunction& AddInputType() {
       fn_proto_builder_.AddInputType<T>();
       return *this;
     }
   
     template <typename T>
     RegisterExternFunction& AddOutputType() {
       fn_proto_builder_.AddOutputType<T>();
       return *this;
     }
   
     template <typename T>
     RegisterExternFunction& SetRetType() {
       fn_proto_builder_.SetRetType<T>();
       return *this;
     }
   
     RegisterExternFunction& SetShapeInference(FunctionProto::shape_inference_t handle) {
       fn_proto_builder_.SetShapeInference(handle);
       return *this;
     }
   
     void End();
   
    private:
     const std::string& fn_name_;
     Target target_;
     void* fn_ptr_{};
     FunctionProto::Builder fn_proto_builder_;
   };
   
   }  // namespace backends
   }  // namespace cinn
