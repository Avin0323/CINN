
.. _program_listing_file__home_chunwei_project_cinn2_cinn_utils_dot_lang.h:

Program Listing for File dot_lang.h
===================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_chunwei_project_cinn2_cinn_utils_dot_lang.h>` (``/home/chunwei/project/cinn2/cinn/utils/dot_lang.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   #include <glog/logging.h>
   
   #include <map>
   #include <sstream>
   #include <string>
   #include <vector>
   
   namespace cinn {
   namespace utils {
   
   static size_t dot_node_counter{0};
   
   struct Node;
   struct Edge;
   struct Attr;
   /*
    * A Dot template that helps to build a DOT graph definition.
    */
   class DotLang {
    public:
     DotLang() = default;
   
     explicit DotLang(const std::vector<Attr>& attrs) : attrs_(attrs) {}
     void AddNode(const std::string& id, const std::vector<Attr>& attrs, std::string label = "");
   
     void AddEdge(const std::string& source, const std::string& target, const std::vector<Attr>& attrs);
   
     std::string operator()() const { return Build(); }
   
    private:
     // Compile to DOT language codes.
     std::string Build() const;
   
     std::map<std::string, Node> nodes_;
     std::vector<Edge> edges_;
     std::vector<Attr> attrs_;
   };
   
   struct Attr {
     std::string key;
     std::string value;
   
     Attr(const std::string& key, const std::string& value) : key(key), value(value) {}
   
     std::string repr() const;
   };
   
   struct Node {
     std::string name;
     std::vector<Attr> attrs;
   
     Node(const std::string& name, const std::vector<Attr>& attrs);
   
     std::string id() const { return id_; }
   
     std::string repr() const;
   
    private:
     std::string id_;
   };
   
   struct Edge {
     std::string source;
     std::string target;
     std::vector<Attr> attrs;
   
     Edge(const std::string& source, const std::string& target, const std::vector<Attr>& attrs)
         : source(source), target(target), attrs(attrs) {}
   
     std::string repr() const;
   };
   
   }  // namespace utils
   }  // namespace cinn
