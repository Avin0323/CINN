
.. _program_listing_file__home_chunwei_project_cinn2_cinn_poly_isl_utils.h:

Program Listing for File isl_utils.h
====================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_chunwei_project_cinn2_cinn_poly_isl_utils.h>` (``/home/chunwei/project/cinn2/cinn/poly/isl_utils.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <isl/cpp.h>
   
   #include <llvm/ADT/ArrayRef.h>
   #include <string>
   #include <vector>
   
   namespace cinn {
   namespace poly {
   
   // @{
   std::vector<std::string> isl_get_dim_names(const isl::set& x);
   std::vector<std::string> isl_get_dim_names(const isl::map& x, isl_dim_type dim_type);
   std::vector<std::string> isl_get_dim_names(isl_map* map, isl_dim_type dim_type);
   std::vector<std::string> isl_get_dim_names(isl_set* set);
   // @}
   
   void isl_set_dim_names(isl::set* __isl_keep set, const std::vector<std::string>& names);
   void isl_set_dim_names(isl::map* __isl_keep map, isl_dim_type dim_type, const std::vector<std::string>& names);
   
   isl::union_set isl_union_set_from_sets(llvm::ArrayRef<isl::set> sets);
   
   isl::map isl_set_dim_name_if_null(isl_map* __isl_take map, std::function<std::string(isl_dim_type, int)> namer);
   isl::set isl_set_dim_name_if_null(isl_set* __isl_take set, std::function<std::string(isl_dim_type, int)> namer);
   
   isl::union_map isl_maps_to_union_map(const std::vector<isl::map>& maps);
   isl::union_set isl_sets_to_union_set(const std::vector<isl::set>& sets);
   
   std::string isl_map_get_statement_repr(__isl_keep isl_map* map, isl_dim_type type);
   
   isl_set* __isl_give isl_get_precending_aixs(isl_set* set, int level, bool with_tuple_name);
   
   int isl_max_level_compatible(isl_set* __isl_keep a, isl_set* __isl_keep b);
   
   isl_set* __isl_give isl_remove_axis_by_name(isl_set* __isl_take set, const char* axis_name);
   isl_map* __isl_give isl_remove_axis_by_name(isl_map* __isl_take map, isl_dim_type dim_type, const char* axis_name);
   isl_set* __isl_give isl_rename_axis(isl_set* __isl_take set, int offset, const char* name);
   isl_map* __isl_give isl_rename_axis(isl_map* __isl_take map, isl_dim_type dim_type, int offset, const char* name);
   
   isl_set* __isl_give isl_simplify(isl_set* __isl_take set);
   
   // { s[i]: 0 < i < 20 }
   bool isl_set_axis_has_noparam_constant_bound(isl_set* __isl_keep set, int pos);
   
   std::tuple<isl::val, isl::val> isl_set_get_axis_range(isl_set* __isl_keep set, int pos);
   
   isl_set* __isl_give isl_set_port_to_other(isl_set* __isl_give from,
                                             isl_set* __isl_give to,
                                             const std::vector<int>& poses);
   
   isl::set SetGetDims(isl::set set, const std::vector<int>& dims);
   
   }  // namespace poly
   }  // namespace cinn
