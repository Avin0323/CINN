
.. _program_listing_file__home_chunwei_project_cinn2_cinn_backends_codegen_cuda_host.h:

Program Listing for File codegen_cuda_host.h
============================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_chunwei_project_cinn2_cinn_backends_codegen_cuda_host.h>` (``/home/chunwei/project/cinn2/cinn/backends/codegen_cuda_host.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <memory>
   #include <string>
   #include <tuple>
   #include <unordered_map>
   #include <vector>
   
   #include "cinn/backends/llvm/codegen_llvm.h"
   
   namespace cinn {
   namespace backends {
   
   class CodeGenCUDA_Host : public CodeGenLLVM {
    public:
     explicit CodeGenCUDA_Host(llvm::Module *m, llvm::IRBuilder<> *b, const std::shared_ptr<SymbolTable> &vars = nullptr)
         : CodeGenLLVM(m, b, vars) {}
   
     static std::string GenKernelPtrVarName(const std::string &kernel_name) { return kernel_name + "_kernel_ptr_"; }
     static std::string GenKernelStreamVarName(const std::string &kernel_name) {
       return kernel_name + "_kernel_stream_ptr_";
     }
   
     using CodeGenLLVM::Visit;
   
     llvm::Value *Visit(const ir::_LoweredFunc_ *func) override {
       if (func->is_gpu_host()) {
         return LowerGPUKernelLauncher(func);
       }
       return CodeGenLLVM::Visit(func);
     }
   
    private:
     llvm::Value *LowerGPUKernelLauncher(const ir::_LoweredFunc_ *func);
   };
   
   }  // namespace backends
   }  // namespace cinn
