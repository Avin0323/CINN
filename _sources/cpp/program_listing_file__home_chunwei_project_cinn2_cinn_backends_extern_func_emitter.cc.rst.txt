
.. _program_listing_file__home_chunwei_project_cinn2_cinn_backends_extern_func_emitter.cc:

Program Listing for File extern_func_emitter.cc
===============================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_chunwei_project_cinn2_cinn_backends_extern_func_emitter.cc>` (``/home/chunwei/project/cinn2/cinn/backends/extern_func_emitter.cc``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #include "cinn/backends/extern_func_emitter.h"
   
   #include <glog/raw_logging.h>
   
   #include <functional>
   #include <iostream>
   #include <string>
   
   #include "cinn/backends/extern_func_emitter_builtin.h"
   #include "cinn/backends/llvm/runtime_symbol_registry.h"
   #include "cinn/runtime/cpu/host_intrinsics.h"
   #include "cinn/utils/string.h"
   
   namespace cinn {
   namespace backends {
   
   ExternFunctionEmitterRegistry& ExternFunctionEmitterRegistry::Global() {
     static ExternFunctionEmitterRegistry x;
     return x;
   }
   
   void ExternFunctionEmitterRegistry::Register(const ExternFuncID& name, ExternFunctionEmitter* x) {
   #ifdef CINN_WITH_DEBUG
     RAW_LOG_INFO("Register extern function emitter [%s]", utils::GetStreamCnt(name).c_str());
   #endif  // CINN_WITH_DEBUG
     CHECK(x);
     data_[name] = std::unique_ptr<ExternFunctionEmitter>(x);
   }
   
   ExternFunctionEmitter* ExternFunctionEmitterRegistry::Lookup(const ExternFuncID& name) const {
     auto it = data_.find(name);
     if (it != data_.end()) {
       return it->second.get();
     }
     return nullptr;
   }
   
   std::ostream& operator<<(std::ostream& os, const ExternFuncID& x) {
     os << x.name << ":" << x.backend_id;
     return os;
   }
   
   ExternFunctionEmitterRegistry::ExternFunctionEmitterRegistry() {}
   
   const FunctionProto& ExternFunctionEmitter::func_proto() const {
     auto* proto = ExternFunctionProtoRegistry::Global().Lookup(func_name());
     CHECK(proto) << "No prototype of function [" << func_name() << "]";
     return *proto;
   }
   
   }  // namespace backends
   }  // namespace cinn
   
   namespace std {
   
   size_t hash<cinn::backends::ExternFuncID>::operator()(const cinn::backends::ExternFuncID& x) const {
     return std::hash<std::string_view>{}(x.name) ^ std::hash<std::string_view>{}(x.backend_id);
   }
   
   }  // namespace std
