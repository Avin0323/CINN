
.. _program_listing_file__home_chunwei_project_cinn2_cinn_frontend_paddle_cpp_block_desc.h:

Program Listing for File block_desc.h
=====================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_chunwei_project_cinn2_cinn_frontend_paddle_cpp_block_desc.h>` (``/home/chunwei/project/cinn2/cinn/frontend/paddle/cpp/block_desc.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   #include "cinn/frontend/paddle/cpp/desc_api.h"
   #include "cinn/frontend/paddle/cpp/op_desc.h"
   #include "cinn/frontend/paddle/cpp/var_desc.h"
   
   namespace cinn::frontend::paddle::cpp {
   
   /*
    * The cpp::BlockDesc is the internal representation for Op. All the internal
    * imprementation should use it, not the pb::BlockDesc.
    */
   class BlockDesc : public BlockDescAPI {
    public:
     BlockDesc() = default;
   
     int32_t Idx() const override { return idx_; }
   
     void SetIdx(int32_t idx) override { idx_ = idx; }
   
     int32_t ParentIdx() const override { return parent_idx_; }
   
     void SetParentIdx(int32_t idx) override { parent_idx_ = idx; }
   
     size_t VarsSize() const override { return vars_.size(); }
   
     void ClearVars() override { vars_.clear(); }
   
     template <typename T>
     T* GetVar(int32_t idx);
   
     template <typename T>
     T* AddVar();
   
     size_t OpsSize() const override { return ops_.size(); }
   
     void ClearOps() override { ops_.clear(); }
   
     template <typename T>
     T* GetOp(int32_t idx);
   
     template <typename T>
     T* AddOp();
   
     int32_t ForwardBlockIdx() const override { return forward_block_idx_; }
   
     void SetForwardBlockIdx(int32_t idx) override { forward_block_idx_ = idx; }
   
    private:
     int32_t idx_;
     int32_t parent_idx_;
     std::vector<OpDesc> ops_;
     std::vector<VarDesc> vars_;
     int32_t forward_block_idx_;
   };
   
   }  // namespace cinn::frontend::paddle::cpp
