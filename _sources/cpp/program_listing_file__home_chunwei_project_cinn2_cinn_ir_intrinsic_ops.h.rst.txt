
.. _program_listing_file__home_chunwei_project_cinn2_cinn_ir_intrinsic_ops.h:

Program Listing for File intrinsic_ops.h
========================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_chunwei_project_cinn2_cinn_ir_intrinsic_ops.h>` (``/home/chunwei/project/cinn2/cinn/ir/intrinsic_ops.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <llvm/ADT/ArrayRef.h>
   #include <llvm/ADT/SmallVector.h>
   #include <llvm/Support/Casting.h>
   
   #include "cinn/common/type.h"
   #include "cinn/ir/ir.h"
   
   
   namespace cinn::ir {
   
   // clang-format off
   #define INTRINSIC_KIND_FOR_EACH(macro__)                 \
     macro__(BufferGetDataHandle)                           \
     macro__(BufferGetDataConstHandle)                      \
     macro__(PodValueToX)                                   \
     macro__(BufferCreate)                                  \
     macro__(GetAddr)                                       \
     macro__(ArgsConstruct)                                 \
   // clang-format on
   
   
   enum class IntrinsicKind {
     // All the intrinsics should registered here.
   #define __(x__) k ## x__,
     INTRINSIC_KIND_FOR_EACH(__)
   #undef __
   };
   
   
   class IntrinsicOp : public IrNode {
    public:
     IntrinsicOp(IntrinsicKind kind, llvm::ArrayRef<Type> input_types, llvm::ArrayRef<Type> output_types)
         : kind_(kind),
           input_types_(input_types.begin(), input_types.end()),
           output_types_(output_types.begin(), output_types.end()) {}
   
     const Type& GetInputType(int offset) const;
     const Type& GetOutputType(int offset) const;
   
     void AddInputType(const Type& type) { input_types_.push_back(type); }
     void AddOutputType(const Type& type) { output_types_.push_back(type); }
   
     const llvm::SmallVectorImpl<Type>& input_types() const { return input_types_; }
     const llvm::SmallVectorImpl<Type>& output_types() const { return input_types_; }
   
     void Verify(llvm::ArrayRef<Type> input_types, llvm::ArrayRef<Type> output_types) const;
     void Verify(llvm::ArrayRef<Expr> inputs, llvm::ArrayRef<Expr> outputs) const;
     void Verify(llvm::ArrayRef<Expr> inputs) const;
   
     void Verify() const override { }
   
     const char* type_info() const override;
   
     IntrinsicKind getKind() const { return kind_; }
   
     IrNodeTy node_type() const override { return _node_type_; }
   
     static constexpr IrNodeTy _node_type_{IrNodeTy::IntrinsicOp};
   
    protected:
     llvm::SmallVector<Type, 4> input_types_;
     llvm::SmallVector<Type, 4> output_types_;
     const IntrinsicKind kind_;
   };
   
   namespace intrinsics {
   
   struct BufferGetDataHandle : public IntrinsicOp {
     // signature: (cinn_buffer_t*) -> (void*)
     BufferGetDataHandle()
         : IntrinsicOp(IntrinsicKind::kBufferGetDataHandle, {type_of<cinn_buffer_t*>()}, {type_of<void*>()}) {}
   
     static Expr Make(Expr buffer);
   
     static bool classof(const IntrinsicOp* s) { return s->getKind() == IntrinsicKind::kBufferGetDataHandle; }
   
     Expr buffer;
   };
   
   struct BufferGetDataConstHandle : public IntrinsicOp {
     // signature: (cinn_buffer_t*) -> (const void*)
     BufferGetDataConstHandle()
         : IntrinsicOp(IntrinsicKind::kBufferGetDataConstHandle, {type_of<const cinn_buffer_t*>()}, {type_of<void*>()}) {}
   
     static Expr Make(Expr buffer);
   
     static bool classof(const IntrinsicOp* s) { return s->getKind() == IntrinsicKind::kBufferGetDataConstHandle; }
   
     Expr buffer;
   };
   
   struct PodValueToX : public IntrinsicOp {
     // signature: (cinn_pod_value_t*) -> (X), X is some pod type.
     PodValueToX()
         : IntrinsicOp(IntrinsicKind::kPodValueToX, {type_of<cinn_pod_value_t*>()}, {}) {}
   
     static Expr Make(Expr pod_value_ptr, const Type& type);
   
     static bool classof(const IntrinsicOp* s) { return s->getKind() == IntrinsicKind::kPodValueToX; }
   
     Expr pod_value_ptr;
   };
   
   struct BufferCreate : public IntrinsicOp {
     // signature: (cinn_buffer_t*) -> void
     BufferCreate(): IntrinsicOp(IntrinsicKind::kBufferCreate, {type_of<cinn_buffer_t*>()}, {}) {}
   
     static Expr Make(Expr buffer);
   
     static bool classof(const IntrinsicOp* s) { return s->getKind() == IntrinsicKind::kBufferCreate; }
   
     Expr buffer;
   };
   
   struct GetAddr : public IntrinsicOp {
     // signature: (X) -> (X*)
     GetAddr(): IntrinsicOp(IntrinsicKind::kGetAddr, {}, {}) {}
   
     static Expr Make(Expr data);
   
     static bool classof(const IntrinsicOp* s) { return s->getKind() == IntrinsicKind::kGetAddr; }
   
     Expr data;
   };
   
   struct ArgsConstruct : public IntrinsicOp {
     ArgsConstruct() : IntrinsicOp(IntrinsicKind::kArgsConstruct, {}, {}) {}
   
     static Expr Make(Var var, llvm::ArrayRef<Expr> args);
   
     static bool classof(const IntrinsicOp* s) { return s->getKind() == IntrinsicKind::kArgsConstruct; }
   
     Var var;
     llvm::SmallVector<Expr, 4> args;
   };
   
   
   }  // namespace intrinsics
   
   }  // namespace cinn::ir
