
.. _program_listing_file__home_chunwei_project_cinn2_cinn_hlir_framework_pass.cc:

Program Listing for File pass.cc
================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_chunwei_project_cinn2_cinn_hlir_framework_pass.cc>` (``/home/chunwei/project/cinn2/cinn/hlir/framework/pass.cc``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #include "cinn/hlir/framework/pass.h"
   
   #include "cinn/hlir/pass/use_pass.h"
   
   namespace cinn {
   namespace hlir {
   namespace framework {
   
   void ApplyPasses(Graph* g, const std::vector<std::string>& passes) {
     std::vector<const PassFunctionRegister*> fpass;
     for (auto& name : passes) {
       auto* reg = Registry<PassFunctionRegister>::Global()->Find(name);
       CHECK(reg) << "Cannot find pass " << name << " in the registry";
       fpass.push_back(reg);
     }
     for (auto* r : fpass) {
       for (auto& dep : r->graph_attr_dependency) {
         CHECK_NE(g->attrs.count(dep), 0) << "To apply pass [" << r->name << "], Graph's attribute [" << dep
                                          << "] is required, but it is not available.";
         if (g->attrs.count(dep) == 0) {
           auto* pass_dep = FindPassDep(dep);
           CHECK(!pass_dep) << "And the attribute is provided by pass [" << pass_dep->name << "].";
         }
       }
       r->body(g);
     }
   }
   
   const PassFunctionRegister* FindPassDep(const std::string& attr_name) {
     for (auto* r : Registry<PassFunctionRegister>::Global()->List()) {
       for (auto& s : r->graph_attr_targets) {
         if (s == attr_name) return r;
       }
     }
     return nullptr;
   }
   
   }  // namespace framework
   }  // namespace hlir
   }  // namespace cinn
