
.. _program_listing_file__home_chunwei_project_cinn2_cinn_optim_cast_simplify_test.cc:

Program Listing for File cast_simplify_test.cc
==============================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_chunwei_project_cinn2_cinn_optim_cast_simplify_test.cc>` (``/home/chunwei/project/cinn2/cinn/optim/cast_simplify_test.cc``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #include "cinn/optim/cast_simplify.h"
   #include <gtest/gtest.h>
   #include "cinn/ir/ir_operators.h"
   #include "cinn/ir/ir_printer.h"
   
   namespace cinn::optim {
   
   TEST(CastSimplify, same_type) {
     Var n("n");
     Expr a = ir::Cast::Make(Int(32), n);
     LOG(INFO) << n->type();
     LOG(INFO) << a;
     CastSimplify(&a);
     ASSERT_EQ(utils::GetStreamCnt(a), "n");
   }
   
   TEST(CastSimplify, Imm_int) {
     Expr a = ir::Cast::Make(Int(64), Expr(1));
     Expr c = ir::Cast::Make(Int(32), a);
     LOG(INFO) << c;
     CastSimplify(&c);
     LOG(INFO) << c;
     ASSERT_EQ(utils::GetStreamCnt(c), "1");
     ASSERT_EQ(c.type(), Int(32));
   }
   
   TEST(CastSimplify, Imm_double) {
     Expr a = ir::Cast::Make(Float(64), Expr(2.33));
     Expr c = ir::Cast::Make(Int(32), a);
     LOG(INFO) << c;
     CastSimplify(&c);
     LOG(INFO) << c;
     ASSERT_EQ(utils::GetStreamCnt(c), "2");
     ASSERT_EQ(c.type(), Int(32));
   }
   
   }  // namespace cinn::optim
