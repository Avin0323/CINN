
.. _program_listing_file__home_chunwei_project_cinn2_cinn_backends_llvm_generate_runtime_llvm_ir.py:

Program Listing for File generate_runtime_llvm_ir.py
====================================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_chunwei_project_cinn2_cinn_backends_llvm_generate_runtime_llvm_ir.py>` (``/home/chunwei/project/cinn2/cinn/backends/llvm/generate_runtime_llvm_ir.py``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: py

   #!/usr/bin/env python3
   
   import sys
   import subprocess
   
   
   def main():
       path = sys.argv[1]
       out_path = sys.argv[2]
   
       srcs = []
       srcs.append('#include <string_view>')
       #srcs.append('#include "cinn/backends/llvm/cinn_runtime_llvm_ir.h"\n')
       srcs.append('namespace cinn::backends {')
       srcs.append("inline std::string_view kRuntimeLlvmIr(")
       srcs.append('R"ROC(')
       with open(path, 'r') as fr:
           srcs.append(fr.read())
   
       srcs.append(')ROC"')
       srcs.append(');\n')
   
       cmd = "llvm-config --version"
       version = subprocess.check_output(
           cmd, shell=True).decode('utf-8').strip().split('.')
       srcs.append("struct llvm_version {")
       for v, n in zip(["major", "minor", "micro"], version):
           srcs.append(f"  static constexpr int k{v.title()} = {n};")
       srcs.append("};")
   
       srcs.append('}  // namespace cinn::backends')
       with open(out_path, 'w') as fw:
           fw.write("\n".join(srcs))
   
   
   def get_clang_version():
       pass
   
   
   if __name__ == "__main__":
       main()
