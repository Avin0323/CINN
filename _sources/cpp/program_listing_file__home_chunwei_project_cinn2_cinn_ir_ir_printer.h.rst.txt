
.. _program_listing_file__home_chunwei_project_cinn2_cinn_ir_ir_printer.h:

Program Listing for File ir_printer.h
=====================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_chunwei_project_cinn2_cinn_ir_ir_printer.h>` (``/home/chunwei/project/cinn2/cinn/ir/ir_printer.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   #include <string>
   #include <vector>
   
   #include "cinn/ir/buffer.h"
   #include "cinn/ir/ir.h"
   #include "cinn/ir/ir_visitor.h"
   
   namespace cinn {
   
   namespace lang {
   class LoweredFunc;
   }  // namespace lang
   
   namespace ir {
   class Module;
   
   struct IrPrinter : public IRVisitor {
     explicit IrPrinter(std::ostream &os) : os_(os) {}
   
     void Print(Expr e);
     void Print(const std::vector<Expr> &exprs, const std::string &splitter = ", ");
     template <typename IRN>
     void PrintBinaryOp(const std::string &op, const BinaryOpNode<IRN> *x);
   
     void DoIndent();
     void IncIndent();
     void DecIndent();
   
     std::ostream &os() { return os_; }
   
   #define __(op__) void Visit(const op__ *x) override;
     NODETY_FORALL(__)
   #undef __
   
   #define __(op__) void Visit(const intrinsics::op__ *x);
     INTRINSIC_KIND_FOR_EACH(__)
   #undef __
   
    private:
     std::ostream &os_;
     uint16_t indent_{};
     const int indent_unit{2};
   };
   
   std::ostream &operator<<(std::ostream &os, Expr a);
   std::ostream &operator<<(std::ostream &os, const std::vector<Expr> &a);
   std::ostream &operator<<(std::ostream &os, const Module &m);
   
   template <typename IRN>
   void IrPrinter::PrintBinaryOp(const std::string &op, const BinaryOpNode<IRN> *x) {
     os_ << "(";
     Print(x->a());
     os_ << " " + op + " ";
     Print(x->b());
     os_ << ")";
   }
   
   }  // namespace ir
   }  // namespace cinn
