
.. _program_listing_file__home_chunwei_project_cinn2_cinn_poly_ast_gen.h:

Program Listing for File ast_gen.h
==================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_chunwei_project_cinn2_cinn_poly_ast_gen.h>` (``/home/chunwei/project/cinn2/cinn/poly/ast_gen.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #pragma once
   #include <isl/cpp.h>
   
   #include <map>
   #include <string>
   #include <vector>
   
   #include "cinn/ir/tensor.h"
   #include "cinn/poly/isl_utils.h"
   #include "cinn/poly/poly_scheduler.h"
   #include "cinn/poly/schedule.h"
   #include "cinn/poly/stage.h"
   #include "cinn/utils/functional.h"
   
   namespace cinn {
   namespace poly {
   
   static const char* kIslParamConstPrefix = "_const_";
   
   class AstGen {
    public:
     AstGen(const isl::set& context, const std::vector<Stage*>& stages, const poly::ScheduleGroup& group);
     ~AstGen();
   
     AstGen& SetIteratorNames(const std::vector<std::string>& names);
   
     isl::ctx ctx() const;
   
     isl::ast_node Build();
   
     const std::map<std::string, isl::ast_expr>& axis2ast(const std::string& tuple_name) const;
   
     const std::map<std::string, Expr> axis2expr(const std::string& tuple_name) const;
   
     bool ContainsStatement(const std::string& name) const;
   
     void SetBuildOptions(const isl::union_map& options);
   
    private:
     class Impl;
     std::unique_ptr<Impl> impl_;
   };
   
   void IslAstNodeToCinnExpr(const isl::ast_node& node, ir::Expr* expr);
   void IslAstExprToCinnExpr(const isl::ast_expr& node, ir::Expr* expr);
   
   isl::union_set TransIdentityExtentToContextId(isl::union_set set);
   isl::set TransIdentityExtentToContextId(isl::set set);
   
   namespace detail {
   
   std::string GetTupleName(isl_ast_node* node);
   
   }  // namespace detail
   
   }  // namespace poly
   }  // namespace cinn
