.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_load_paddle_model.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_tutorials_load_paddle_model.py:


Load and Execute Paddle Model
=====================

In this tutorial, we will show you how to load and execute a paddle model in CINN.


.. code-block:: python


    import cinn
    from cinn import *
    from cinn.frontend import *
    from cinn.framework import *
    from cinn.common import *
    import numpy as np








Prepare to Load Model
-------------------------
Declare the params and prepare to load and execute the paddle model.

- :code:`enable_gpu` implies whether to run CINN on CUDA backends.

- :code:`mnodel_dir` is the path where the paddle model is stored.

- :code:`input_tensor` is the name of input tensor in the model.

- :code:`target_tensor` is the name of output tensor we want.

- :code:`x_shape` is the input tensor's shape of the model


.. code-block:: python


    enable_gpu = "OFF"
    model_dir = "./ResNet18"
    input_tensor = 'image'
    target_tensor = 'save_infer_model/scale_0'
    x_shape = [2, 3, 224, 224]








Set the target backend


.. code-block:: python

    if enable_gpu == "ON":
        target = DefaultNVGPUTarget()
    else:
        target = DefaultHostTarget()








Set the input tensor and init interpreter


.. code-block:: python

    executor = Interpreter([input_tensor], [x_shape])








Load Model to CINN
-------------------------
Load the paddle model and transform it into CINN IR

* :code:`mnodel_dir` is the path where the paddle model is stored.

* :code:`target` is the backend to execute model on.

* :code:`params_combined` implies whether the params of paddle
model is stored in one file.


.. code-block:: python


    params_combined = True
    executor.load_paddle_model(model_dir, target, params_combined)








Get input tensor and set input data


.. code-block:: python

    a_t = executor.get_tensor(input_tensor)
    x_data = np.random.random(x_shape).astype("float32")
    a_t.from_numpy(x_data, target)








Get output tensor and init its data to zero.


.. code-block:: python

    out = executor.get_tensor(target_tensor)
    out.from_numpy(np.zeros(out.shape(), dtype='float32'), target)








Execute Model
-------------------------
Execute the model and get output tensor's data.
* :code:`out` is the data of output tensor we want.


.. code-block:: python


    executor.run()
    out = out.numpy(target)
    print("Execution Done!\nResult shape is:\n", out.shape)
    print("Result data is:\n", out)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Execution Done!
    Result shape is:
     (2, 1000)
    Result data is:
     [[4.0888681e-05 4.5216634e-04 8.9577434e-04 ... 9.7412085e-05
      7.5427452e-05 2.2597418e-03]
     [3.8815684e-05 5.0507579e-04 7.3965755e-04 ... 1.1313002e-04
      7.5919466e-05 2.9408315e-03]]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  12.527 seconds)


.. _sphx_glr_download_tutorials_load_paddle_model.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: load_paddle_model.py <load_paddle_model.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: load_paddle_model.ipynb <load_paddle_model.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
